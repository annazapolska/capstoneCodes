import cv2
import time
import serial
import numpy as np
from picamera2 import Picamera2
from gpiozero import DistanceSensor

sensor = DistanceSensor(echo=22, trigger=27, max_distance =4)

# Initialize Serial Communication
ser_pico = serial.Serial('/dev/ttyACM0', 115200, timeout=1)  # Adjust for Pico
time.sleep(2)  # Allow time for serial connection

# Define frame properties
FRAME_WIDTH = 1280
FRAME_HEIGHT = 720
CENTER_X = FRAME_WIDTH // 2

# Initialize PiCamera2
picam2 = Picamera2()
config = picam2.create_video_configuration(main={"size": (FRAME_WIDTH, FRAME_HEIGHT)})
picam2.configure(config)
picam2.set_controls({"FrameRate": 10})
picam2.start()

# Define Blue Color Range (HSV)
lower_blue = np.array([100, 150, 50])
upper_blue = np.array([140, 255, 255])
lower_yellow = np.array([20, 100, 100]) 
upper_yellow = np.array([30, 255, 255])

# Define tracking zones
left_zone = [CENTER_X - 70, CENTER_X + 70]
right_zone = [CENTER_X -70, CENTER_X + 70]
correction_angle = 10  # Angle adjustment

# Video Writer (Save Video)
fourcc = cv2.VideoWriter_fourcc(*'XVID')  # Codec for .avi file
video_writer = cv2.VideoWriter('output.avi', fourcc, 20.0, (FRAME_WIDTH, FRAME_HEIGHT))

print("Pi 5: Started Blue Object Detection (State B1)")
B1=True #stops the code when state 1 is done

try:
    while B1==True: 
		print("Detecting Blue Bucket 1")	
        # Capture frame from PiCamera2
        frame = picam2.capture_array()
        frame_bgr = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

        # Convert frame to HSV
        hsv = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(hsv, lower_blue, upper_blue)

        # Apply preprocessing
        mask = cv2.GaussianBlur(mask, (5, 5), 0)
        mask = cv2.erode(mask, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)

        # Detect contours
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        if contours:
            largest_contour = max(contours, key=cv2.contourArea)
            M = cv2.moments(largest_contour)
            
            if M["m00"] != 0:
                centroid_x = int(M["m10"] / M["m00"])
                centroid_y = int(M["m01"] / M["m00"])
                
                # Vizual aid for the bucket
                cv2.drawContours(frame_bgr, [largest_contour], -1, (0, 255, 0), 2)  # Green contours
                cv2.circle(frame_bgr, (centroid_x, centroid_y), 5, (0, 0, 255), -1)  # Red dot at centroid
                cv2.line(frame_bgr, (centroid_x, 0), (centroid_x, FRAME_HEIGHT), (255, 0, 0), 2)  # Blue line for x-axis tracking
                # Display centroid value
                cv2.putText(frame_bgr, f"Centroid X: {centroid_x}", (centroid_x + 10, centroid_y),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

                print("Centroid is on: ", centroid_x)
                # Adjust movement
                if centroid_x > right_zone[1]:
                    ser_pico.reset_input_buffer()
                    ser_pico.write(b'AR\n')
                    ser_pico.flush()
                    print("Pi 5: Adjusting right")
                elif centroid_x < right_zone[0]:
                    ser_pico.reset_input_buffer()
                    ser_pico.write(b'AL\n')
                    ser_pico.flush()
                    print("Pi 5: Adjusting left")
                else:
                    ser_pico.reset_input_buffer()
                    ser_pico.write(b'STR2\n')
                    ser_pico.flush()
                    print("Pi 5: Moving straight")
        
        # Write the frame to video file
        video_writer.write(frame_bgr)
        
        distance=sensor.distance * 100
        print("Distance to the bucket: ", distance)
        if distance<150:
            print("Pi 5: Turning Right 315 degrees")
            ser_pico.reset_input_buffer()
            ser_pico.write(b'STR-25\n') #stop
            time.sleep(0.65)
            ser_pico.write(b'T13150\n') #turn left
            ser_pico.write(b'STR-25\n') #stop
            time.sleep(0.85)
            ser_pico.write(b'T61170\n')#turn right
            ser_pico.write(b'STR2\n') #stop
            time.sleep(5)
            B1=False
	
	Y1=True
	while Y1==True:
		print("Detecting Yellow bucket")
        # Capture frame from PiCamera2
        frame = picam2.capture_array()
        frame_bgr = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

        # Convert frame to HSV
        hsv = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(hsv, lower_yellow, upper_yellow)

        # Apply preprocessing
        mask = cv2.GaussianBlur(mask, (5, 5), 0)
        mask = cv2.erode(mask, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)

        # Detect contours
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        if contours:
            largest_contour = max(contours, key=cv2.contourArea)
            M = cv2.moments(largest_contour)
            
            if M["m00"] != 0:
                centroid_x = int(M["m10"] / M["m00"])
                centroid_y = int(M["m01"] / M["m00"])
                
                # Vizual aid for the bucket
                cv2.drawContours(frame_bgr, [largest_contour], -1, (0, 255, 0), 2)  # Green contours
                cv2.circle(frame_bgr, (centroid_x, centroid_y), 5, (0, 0, 255), -1)  # Red dot at centroid
                cv2.line(frame_bgr, (centroid_x, 0), (centroid_x, FRAME_HEIGHT), (255, 0, 0), 2)  # Blue line for x-axis tracking
                # Display centroid value
                cv2.putText(frame_bgr, f"Centroid X: {centroid_x}", (centroid_x + 10, centroid_y),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

                print("Centroid is on: ", centroid_x)
                # Adjust movement
                if centroid_x > left_zone[1]:
                    ser_pico.reset_input_buffer()
                    ser_pico.write(b'AR\n')
                    ser_pico.flush()
                    print("Pi 5: Adjusting right")
                elif centroid_x < left_zone[0]:
                    ser_pico.reset_input_buffer()
                    ser_pico.write(b'AL\n')
                    ser_pico.flush()
                    print("Pi 5: Adjusting left")
                else:
                    ser_pico.reset_input_buffer()
                    ser_pico.write(b'STR2\n')
                    ser_pico.flush()
                    print("Pi 5: Moving straight")
        
        # Write the frame to video file
        video_writer.write(frame_bgr)
        
        distance=sensor.distance * 100
        print("Distance to the bucket: ", distance)
        if distance<150:
            print("Pi 5: Turning Left 60 degrees")
            ser_pico.reset_input_buffer()
            ser_pico.write(b'STR-25\n') #stop
            time.sleep(0.65)
            ser_pico.write(b'T31150\n') #turn slight right
            ser_pico.write(b'STR-25\n') #stop
            time.sleep(0.85)
            ser_pico.write(b'T16170\n')#turn left
            ser_pico.write(b'STR2\n') #stop
            time.sleep(5)
            Y1=False

	print("Finite State Machine Finished")

finally:
    print("Pi 5: Stopping Detection")
    ser_pico.write(b'STOP\n')
    picam2.stop()
    video_writer.release()  # Release video writer
    cv2.destroyAllWindows()
    print("Pi 5: Video saved as 'output.avi'")
